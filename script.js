let playerData = null;
let lands = [true,false,false,false,false,false,false,false,false];
let energy = 100;
const maxEnergy = 100;
const SERVER = 'https://c3a269c94b76.ngrok-free.app'; // —Ç–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ngrok URL

// === UI ===
function showForm(type){
  document.getElementById('auth-choice-screen').style.display='none';
  if(type==='login') document.getElementById('login-screen').style.display='flex';
  else document.getElementById('register-screen').style.display='flex';
}

function backToChoice(){
  document.getElementById('login-screen').style.display='none';
  document.getElementById('register-screen').style.display='none';
  document.getElementById('auth-choice-screen').style.display='flex';
}

// === –£—Ä–æ–≤–µ–Ω—å ===
function renderLevel(current, max=10){
  const bar = document.getElementById('level-bar');
  const progress = document.getElementById('level-progress');
  bar.innerHTML='';
  for(let i=1;i<=max;i++){
    const s=document.createElement('span');
    s.innerText='üë§';
    if(i<=current) s.classList.add('active');
    bar.appendChild(s);
  }
  progress.innerText=current+' / '+max;
}

// === BR ===
function updateBR(){
  if(!playerData) return;
  const br = typeof playerData.BR === 'number' ? playerData.BR.toFixed(1) : 100;
  document.getElementById('navbar-br').innerText='‚öîÔ∏è BR: '+br;
}

// === Login ===
function login(){
  const username=document.getElementById('login-username').value.trim();
  const password=document.getElementById('login-password').value.trim();
  if(!username || !password){ alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'); return; }

  fetch(`${SERVER}/api/login`,{
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body:JSON.stringify({username,password})
  })
  .then(async res=>{
    if(!res.ok) throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ${res.status}`);
    return res.json();
  })
  .then(data=>{
    if(data.error) alert(data.error);
    else{
      playerData=data;
      lands = playerData.lands || lands;
      playerData.referrals = playerData.referrals || [];
      document.getElementById('navbar-username').innerText='üë§ '+playerData.username+' ['+(playerData.alliance||'-')+']';
      document.getElementById('login-screen').style.display='none';
      document.getElementById('main-screen').style.display='flex';
      renderLevel(playerData.level||1);
      updateBR();
    }
  })
  .catch(err=>alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: '+err.message));
}

// === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
function register(){
  const username=document.getElementById('reg-username').value.trim();
  const password=document.getElementById('reg-password').value.trim();
  const alliance=document.getElementById('reg-alliance').value.trim();
  if(!username || !password){ alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è'); return; }

  fetch(`${SERVER}/api/register`,{
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body:JSON.stringify({username,password,alliance})
  })
  .then(async res=>{
    if(!res.ok) throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ${res.status}`);
    return res.json();
  })
  .then(data=>{
    if(data.error) alert(data.error);
    else{
      alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–æ–π–¥–∏—Ç–µ.');
      backToChoice();
    }
  })
  .catch(err=>alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: '+err.message));
}

// === –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ===
function savePlayerData(){
  if(!playerData || !playerData.id) return;
  fetch(`${SERVER}/api/save/${playerData.id}`,{
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body:JSON.stringify({
      BR:Number(playerData.BR || 100),
      balance:Number(playerData.balance || 0),
      level:Number(playerData.level || 1),
      lands,
      referrals:playerData.referrals || []
    })
  })
  .then(async res=>{
    if(!res.ok) throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ${res.status}`);
    return res.json();
  })
  .then(data=>{
    if(data.error) console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',data.error);
  })
  .catch(err=>console.error('–û—à–∏–±–∫–∞ fetch',err));
}

// === –ö–æ–Ω—Ç–µ–Ω—Ç ===
function showContent(type){
  if(!playerData) return alert('–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ!');
  const contentBox=document.getElementById('content-box');
  contentBox.innerHTML='<div id="main-text"></div>';
  const mainText=document.getElementById('main-text');

  if(type==='palace'){
    mainText.innerHTML=`‚ÑπÔ∏è –î–≤–æ—Ä–µ—Ü<br><br>
      üë§ –ò–º—è: ${playerData.username}<br>
      ü§ù –†–µ—Ñ–µ—Ä –º–∞—Å—Ç–µ—Ä: -<br>
      üí∞ –ë–∞–ª–∞–Ω—Å: ${playerData.balance || 0}<br>
      üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${playerData.created_at ? new Date(playerData.created_at).toLocaleDateString() : '-'}<br>
      üÜî ID: #${playerData.id}<br>
      ‚öîÔ∏è BR: ${(playerData.BR||100).toFixed(1)}`;
  } else if(type==='referrals'){
    mainText.innerHTML=`üë• –†–µ—Ñ–µ—Ä–∞–ª—ã<br><br>
      –í–∞—à ID: <input type="text" value="${playerData.id}" readonly style="width:120px;">
      <button onclick="copyReferral()">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É</button>
      <div id="ref-list" style="margin-top:10px;"></div>`;
    updateReferralList();
  } else if(type==='balance'){
    mainText.innerHTML=`üí∞ –ë–∞–ª–∞–Ω—Å<br><br>–í–∞—à –±–∞–ª–∞–Ω—Å: ${playerData.balance || 0} TON.`;
    const sub = document.createElement('div');
    sub.className='sub-buttons';
    sub.innerHTML=`<button onclick="withdraw()">–í—ã–≤–æ–¥</button><button onclick="deposit()">–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</button>`;
    contentBox.appendChild(sub);
  } else if(type==='rating'){
    mainText.innerHTML=`üèÜ –†–µ–π—Ç–∏–Ω–≥<br><br>`;
    fetch(`${SERVER}/api/rating`)
      .then(res=>{
        if(!res.ok) throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ${res.status}`);
        const contentType = res.headers.get("content-type");
        if(!contentType || !contentType.includes("application/json")){
          throw new Error("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ JSON");
        }
        return res.json();
      })
      .then(users=>{
        const table=document.createElement('table');
        table.innerHTML=`<thead><tr><th>‚Ññ</th><th>–ò–º—è</th><th>BR</th><th>–ë–∞–ª–∞–Ω—Å</th></tr></thead>
          <tbody>${users.map((u,i)=>`<tr><td>${i+1}</td><td>${u.username}</td><td>${(u.BR||0).toFixed(1)}</td><td>${u.balance||0}</td></tr>`).join('')}</tbody>`;
        contentBox.appendChild(table);
      })
      .catch(err=>{
        mainText.innerText=`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: ${err.message}`;
      });
  } else if(type==='shop'){
    mainText.innerHTML=`üõí –ú–∞–≥–∞–∑–∏–Ω<br><br>`;
    const shopDiv=document.createElement('div');
    shopDiv.className='sub-buttons';
    shopDiv.innerHTML=`
      <button onclick="buyItem(1,0.5,'–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –¥–≤–æ—Ä—Ü–∞')">üè∞ –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –¥–≤–æ—Ä—Ü–∞ (1 TON ‚Üí +0.5% BR)</button>
      <button onclick="buyItem(2,1.5,'–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∞—Ä–º–∏–∏')">‚öîÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∞—Ä–º–∏–∏ (2 TON ‚Üí +1.5% BR)</button>
      <button onclick="buyItem(3,5,'–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞')">üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ (3 TON ‚Üí +5% BR)</button>`;
    contentBox.appendChild(shopDiv);

    const grid=document.createElement('div');
    grid.className='shop-grid';
    for(let i=0;i<9;i++){
      const cell=document.createElement('div');
      cell.innerText='üè°';
      if(lands[i]) cell.classList.add('owned');
      const ownedCount=lands.filter(x=>x).length;
      const nextCost=5*ownedCount;
      if(!lands[i]) cell.title=`–ö—É–ø–∏—Ç—å –∑–∞ ${nextCost} TON`;
      cell.onclick=()=>buyLand(i);
      grid.appendChild(cell);
    }
    contentBox.appendChild(grid);
  } else if(type==='rules'){
    mainText.innerHTML=`<b>–ü—Ä–∞–≤–∏–ª–∞</b><br><br>
      –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ.<br>
      –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ TON.<br>
      –î–æ–Ω–∞—Ç 7 TON –¥–ª—è –≤—ã–≤–æ–¥–∞.<br>
      –í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ –∏ NFT —Ç–æ—Ä–≥–æ–≤–ª—è.`;
  }
}

// === –†–µ—Ñ–µ—Ä–∞–ª—ã ===
function copyReferral(){
  navigator.clipboard.writeText(`${window.location.origin}${window.location.pathname}?ref=${playerData.id}`)
    .then(()=>alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞'));
}

function updateReferralList(){
  const div=document.getElementById('ref-list');
  if(!div) return;
  const keys=playerData.referrals||[];
  if(keys.length===0) div.innerText='–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤';
  else div.innerHTML='<ul>'+keys.map(k=>`<li>${k}</li>`).join('')+'</ul>';
}

// === –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/–≤—ã–≤–æ–¥ ===
function withdraw(){ alert('–í—ã–≤–æ–¥ (–¥–µ–º–æ)'); }
function deposit(){ playerData.balance=(playerData.balance||0)+5; alert('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ +5 TON'); showContent('balance'); }

// === –ü–æ–∫—É–ø–∫–∏ ===
function buyItem(cost, percent, name){
  if(playerData.balance<cost){ alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON'); return; }
  playerData.balance-=cost;
  playerData.BR+=(playerData.BR || 100)*(percent/100);
  updateBR();
  savePlayerData();
  alert('–ö—É–ø–ª–µ–Ω–æ: '+name);
  showContent('shop');
}

function buyLand(index){
  if(lands[index]) return;
  const ownedCount = lands.filter(x=>x).length;
  const cost = 5 * ownedCount;
  if(playerData.balance<cost){ alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON'); return; }
  playerData.balance-=cost;
  lands[index]=true;
  savePlayerData();
  alert(`–ö—É–ø–ª–µ–Ω–æ –ø–æ–ª–µ #${index+1} –∑–∞ ${cost} TON`);
  showContent('shop');
}

// === –≠–Ω–µ—Ä–≥–∏—è –∏ –∫–ª–∏–∫–∏ –ø–æ –¥–≤–æ—Ä—Ü—É ===
document.addEventListener('DOMContentLoaded',()=>{
  setInterval(()=>{ if(energy<maxEnergy){ energy++; updateEnergyDisplay(); } },5000);

  const palace=document.querySelector('.emoji-circle');
  const energyDisplay=document.createElement('div');
  energyDisplay.id='energy-display';
  energyDisplay.innerText=`‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${energy}`;
  palace.appendChild(energyDisplay);

  function updateEnergyDisplay(){ energyDisplay.innerText=`‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${energy}`; }

  palace.addEventListener('click',()=>{
    if(energy<2){ alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏!'); return; }
    energy-=2;
    playerData.BR=(playerData.BR||100)+0.05;
    updateEnergyDisplay();
    updateBR();
    showSwordAnimation();
    savePlayerData();
  });

  function showSwordAnimation(){
    const sword=document.createElement('div');
    sword.className='sword-tap';
    sword.innerText='‚öîÔ∏è';
    sword.style.left=(50 + (Math.random()*40-20))+'%';
    palace.appendChild(sword);
    setTimeout(()=>sword.remove(),800);
  }
});
